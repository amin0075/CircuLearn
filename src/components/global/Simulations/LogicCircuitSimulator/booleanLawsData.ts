import { Node, Edge } from "react-flow-renderer";

export const booleanLawsData: Record<string, { nodes: Node[]; edges: Edge[] }> =
  {
    identityLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "constant-1",
          type: "inputNode",
          data: { label: "1 (Constant)", value: 1 },
          position: { x: 100, y: 150 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 250, y: 150 },
        },
        {
          id: "output-and",
          type: "outputNode",
          data: { label: "Output AND", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output-or",
          type: "outputNode",
          data: { label: "Output OR", value: 0 },
          position: { x: 400, y: 150 },
        },
      ],
      edges: [
        { id: "e1-and", source: "input-1", target: "and-gate", label: "0" },
        { id: "e2-and", source: "constant-1", target: "and-gate", label: "1" },
        {
          id: "e-and-out",
          source: "and-gate",
          target: "output-and",
          label: "0",
        },
        { id: "e1-or", source: "input-1", target: "or-gate", label: "0" },
        { id: "e2-or", source: "constant-1", target: "or-gate", label: "1" },
        { id: "e-or-out", source: "or-gate", target: "output-or", label: "0" },
      ],
    },
    annulmentLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "constant-0",
          type: "inputNode",
          data: { label: "0 (Constant)", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "constant-1",
          type: "inputNode",
          data: { label: "1 (Constant)", value: 1 },
          position: { x: 100, y: 250 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 250, y: 150 },
        },
        {
          id: "output-and",
          type: "outputNode",
          data: { label: "Output AND", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output-or",
          type: "outputNode",
          data: { label: "Output OR", value: 1 },
          position: { x: 400, y: 150 },
        },
      ],
      edges: [
        { id: "e1-and", source: "input-1", target: "and-gate", label: "0" },
        { id: "e2-and", source: "constant-0", target: "and-gate", label: "0" },
        {
          id: "e-and-out",
          source: "and-gate",
          target: "output-and",
          label: "0",
        },
        { id: "e1-or", source: "input-1", target: "or-gate", label: "0" },
        { id: "e2-or", source: "constant-1", target: "or-gate", label: "1" },
        { id: "e-or-out", source: "or-gate", target: "output-or", label: "1" },
      ],
    },
    idempotentLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 100 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 250, y: 150 },
        },
        {
          id: "output-and",
          type: "outputNode",
          data: { label: "Output AND", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output-or",
          type: "outputNode",
          data: { label: "Output OR", value: 0 },
          position: { x: 400, y: 150 },
        },
      ],
      edges: [
        {
          id: "e1-and",
          source: "input-1",
          target: "and-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-and",
          source: "input-1",
          target: "and-gate",
          label: "0",
          targetHandle: "input2",
        },
        {
          id: "e-and-out",
          source: "and-gate",
          target: "output-and",
          label: "0",
        },
        {
          id: "e1-or",
          source: "input-1",
          target: "or-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-or",
          source: "input-1",
          target: "or-gate",
          label: "0",
          targetHandle: "input2",
        },
        { id: "e-or-out", source: "or-gate", target: "output-or", label: "0" },
      ],
    },
    complementLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "not-gate",
          type: "gateNode",
          data: { gateType: "not", value: 0, label: "NOT Gate" },
          position: { x: 250, y: 50 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 400, y: 150 },
        },
        {
          id: "output-and",
          type: "outputNode",
          data: { label: "Output AND", value: 0 },
          position: { x: 550, y: 50 },
        },
        {
          id: "output-or",
          type: "outputNode",
          data: { label: "Output OR", value: 1 },
          position: { x: 550, y: 150 },
        },
      ],
      edges: [
        { id: "e1-not", source: "input-1", target: "not-gate", label: "0" },
        {
          id: "e2-and",
          source: "input-1",
          target: "and-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e3-and",
          source: "not-gate",
          target: "and-gate",
          label: "0",
          targetHandle: "input2",
        },
        {
          id: "e-and-out",
          source: "and-gate",
          target: "output-and",
          label: "0",
        },
        {
          id: "e2-or",
          source: "input-1",
          target: "or-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e3-or",
          source: "not-gate",
          target: "or-gate",
          label: "0",
          targetHandle: "input2",
        },
        { id: "e-or-out", source: "or-gate", target: "output-or", label: "1" },
      ],
    },
    commutativeLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "input-2",
          type: "inputNode",
          data: { label: "Input B", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 250, y: 150 },
        },
        {
          id: "output-and",
          type: "outputNode",
          data: { label: "Output AND", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output-or",
          type: "outputNode",
          data: { label: "Output OR", value: 0 },
          position: { x: 400, y: 150 },
        },
      ],
      edges: [
        {
          id: "e1-and",
          source: "input-1",
          target: "and-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-and",
          source: "input-2",
          target: "and-gate",
          label: "0",
          targetHandle: "input2",
        },
        {
          id: "e-and-out",
          source: "and-gate",
          target: "output-and",
          label: "0",
        },
        {
          id: "e1-or",
          source: "input-1",
          target: "or-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-or",
          source: "input-2",
          target: "or-gate",
          label: "0",
          targetHandle: "input2",
        },
        { id: "e-or-out", source: "or-gate", target: "output-or", label: "0" },
      ],
    },
    doubleNegationLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "not-gate-1",
          type: "gateNode",
          data: { gateType: "not", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "not-gate-2",
          type: "gateNode",
          data: { gateType: "not", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output",
          type: "outputNode",
          data: { label: "Output", value: 0 },
          position: { x: 550, y: 50 },
        },
      ],
      edges: [
        { id: "e1-not", source: "input-1", target: "not-gate-1", label: "0" },
        {
          id: "e2-not",
          source: "not-gate-1",
          target: "not-gate-2",
          label: "0",
        },
        { id: "e3-output", source: "not-gate-2", target: "output", label: "0" },
      ],
    },
    deMorganTheorem: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "input-2",
          type: "inputNode",
          data: { label: "Input B", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "nand-gate",
          type: "gateNode",
          data: { gateType: "nand", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "not-gate-1",
          type: "gateNode",
          data: { gateType: "not", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "not-gate-2",
          type: "gateNode",
          data: { gateType: "not", value: 0 },
          position: { x: 400, y: 150 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 550, y: 50 },
        },
        {
          id: "output",
          type: "outputNode",
          data: { label: "Output", value: 0 },
          position: { x: 700, y: 50 },
        },
      ],
      edges: [
        {
          id: "e1-nand",
          source: "input-1",
          target: "nand-gate",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-nand",
          source: "input-2",
          target: "nand-gate",
          label: "0",
          targetHandle: "input2",
        },
        {
          id: "e-nand-not1",
          source: "nand-gate",
          target: "not-gate-1",
          label: "0",
        },
        { id: "e1-not2", source: "input-1", target: "not-gate-1", label: "0" },
        { id: "e2-not2", source: "input-2", target: "not-gate-2", label: "0" },
        { id: "e-not-or", source: "not-gate-1", target: "or-gate", label: "0" },
        { id: "e-or-out", source: "or-gate", target: "output", label: "0" },
      ],
    },
    distributiveLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "input-2",
          type: "inputNode",
          data: { label: "Input B", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "input-3",
          type: "inputNode",
          data: { label: "Input C", value: 0 },
          position: { x: 100, y: 250 },
        },
        {
          id: "and-gate-1",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "and-gate-2",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 150 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 400, y: 100 },
        },
        {
          id: "output",
          type: "outputNode",
          data: { label: "Output", value: 0 },
          position: { x: 550, y: 100 },
        },
      ],
      edges: [
        {
          id: "e1-and",
          source: "input-1",
          target: "and-gate-1",
          label: "0",
          targetHandle: "input1",
        },
        {
          id: "e2-and",
          source: "input-2",
          target: "and-gate-1",
          label: "0",
          targetHandle: "input2",
        },
        {
          id: "e3-and",
          source: "input-3",
          target: "and-gate-2",
          label: "0",
          targetHandle: "input1",
        },
        { id: "e-and-or", source: "and-gate-1", target: "or-gate", label: "0" },
        {
          id: "e-and2-or",
          source: "and-gate-2",
          target: "or-gate",
          label: "0",
        },
        { id: "e-or-out", source: "or-gate", target: "output", label: "0" },
      ],
    },
    absorptiveLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "input-2",
          type: "inputNode",
          data: { label: "Input B", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "or-gate",
          type: "gateNode",
          data: { gateType: "or", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "and-gate",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 400, y: 50 },
        },
        {
          id: "output",
          type: "outputNode",
          data: { label: "Output", value: 0 },
          position: { x: 550, y: 50 },
        },
      ],
      edges: [
        { id: "e1-or", source: "input-1", target: "or-gate", label: "0" },
        { id: "e2-or", source: "input-2", target: "or-gate", label: "0" },
        { id: "e-or-and", source: "or-gate", target: "and-gate", label: "0" },
        { id: "e-and-out", source: "and-gate", target: "output", label: "0" },
      ],
    },
    associativeLaw: {
      nodes: [
        {
          id: "input-1",
          type: "inputNode",
          data: { label: "Input A", value: 0 },
          position: { x: 100, y: 50 },
        },
        {
          id: "input-2",
          type: "inputNode",
          data: { label: "Input B", value: 0 },
          position: { x: 100, y: 150 },
        },
        {
          id: "input-3",
          type: "inputNode",
          data: { label: "Input C", value: 0 },
          position: { x: 100, y: 250 },
        },
        {
          id: "and-gate-1",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 250, y: 50 },
        },
        {
          id: "and-gate-2",
          type: "gateNode",
          data: { gateType: "and", value: 0 },
          position: { x: 400, y: 100 },
        },
        {
          id: "output",
          type: "outputNode",
          data: { label: "Output", value: 0 },
          position: { x: 550, y: 100 },
        },
      ],
      edges: [
        { id: "e1-and1", source: "input-1", target: "and-gate-1", label: "0" },
        { id: "e2-and1", source: "input-2", target: "and-gate-1", label: "0" },
        {
          id: "e-and2",
          source: "and-gate-1",
          target: "and-gate-2",
          label: "0",
        },
        { id: "e3-and2", source: "input-3", target: "and-gate-2", label: "0" },
        { id: "e-and-out", source: "and-gate-2", target: "output", label: "0" },
      ],
    },
  };

export default booleanLawsData;
